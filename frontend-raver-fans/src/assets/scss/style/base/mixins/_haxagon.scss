@import '../bourbon';

// Rounded Haxagon Mixin
// @include rounded-hexagon();
// @include rounded-hexagon(30px, 5px, #000, 12px, #fff);
@mixin rounded-hexagon($hexagon-height, $hexagon-radius, $hexagon-bg-color, $hexagon-font-size, $hexagon-color) {
	margin: 0;
	color: $hexagon-color;
	background: $hexagon-bg-color;
	height: calc((#{$hexagon-height}  * 1.414213562373095) - (((#{$hexagon-radius} * 2) * 1.414213562373095) - (#{$hexagon-radius} * 2)));
	line-height: calc((#{$hexagon-height}  * 1.414213562373095) - (((#{$hexagon-radius} * 2) * 1.414213562373095) - (#{$hexagon-radius} * 2)));
	position: absolute;
	top: calc( 50% - (((#{$hexagon-height}  * 1.414213562373095) - (((#{$hexagon-radius} * 2) * 1.414213562373095) - (#{$hexagon-radius} * 2))) / 2));
	left: 50%;
	margin-left: -9em;
	min-width: 18em;
	width: $hexagon-height;
	text-align: center;
	font-size: $hexagon-font-size;
	&:after, &:before{
		content: " ";
		transform: rotate(45deg);
		transform-origin: 0px 0px;
		background-color:$hexagon-bg-color;
		width: $hexagon-height; 
		height:$hexagon-height; 
		top: calc(((#{$hexagon-radius} * 1.414213562373095) - #{$hexagon-radius}) * -1);
		left: 0px;
		position:absolute;
		border-radius: #{$hexagon-radius};
		z-index: -1;
	}
	&:before{
		left: 100%;
	}
}


// HAXAGON WITH USING CALC CSS
//@include hexagon; This haxagon for using default value by default flat-left will activate;
//@include hexagon(50px, #000, 12px, #fff, 1px solid #fff, 'true/false');  if you added color, bg or differents size of haxagon = if true than flat top will show = else flat left haxagon will show
@mixin hexagon($hexagon-height:35px, $hexagon-bg-color:transparent, $hexagon-font-size:16px, $hexagon-color:#fff, $border:none, $flat-top:'false') {
	height: $hexagon-height;
	width: $hexagon-height;
	position: relative;
	display: inline-block;
	color: $hexagon-color;
	text-align: center;
	@if $flat-top == 'true' {
		margin-left: calc(#{$hexagon-height}  / 2.6);
		//margin-right: calc(#{$hexagon-height}  / 2.5);
		.hexagon{
			height: 100%;
			width: calc(100% * 0.57735); 
			display:block;
			background-color: $hexagon-bg-color;
			line-height: $hexagon-height;
            border-top: $border;
            border-bottom: $border;
			&:after, &:before{
				content: ''; 
				position: absolute;
				left: 0; 
				top: 0;
				right: calc((100% / 2) - ((100% * 0.57735) / 2));
				background-color: inherit;
				height: inherit;
				width: inherit;
                border-top: $border;
                border-bottom: $border;
			}
			&:before{
				@include rotateZ(60deg);
			}
			&:after{
				@include rotateZ(-60deg);
			}
		}
	} @else {
		margin-top: calc(#{$hexagon-height}  / 2.6);
		.hexagon{
			height: calc(100% * 0.57735); 
			width: 100%;
			display:block;
			background-color: $hexagon-bg-color;
			line-height: calc(100% * 0.57735);
            border-left: $border;
            border-right: $border;
			&:after, &:before{
				content: ''; 
				position: absolute;
				left: 0; 
				top: 0;
				right: calc((100% / 2) - ((100% * 0.57735) / 2));
				background-color: inherit;
				height: inherit;
				width: inherit;
                border-left: $border;
                border-right: $border;
			}
			&:before{
				@include rotateZ(120deg);
			}
			&:after{
				@include rotateZ(-120deg);
			}
		}
	}
}

// Image in background of Haxagon
// try passing different sizes and background images to the mixin
// @include Image-hexagon();
// @include Image-hexagon(150px, url(http://placekitten.com/g/250));
@mixin Image-hexagon($size: 300px, $background: url(), $shadow: 0 0 20px rgba(0,0,0,0.8), $borderWidth: 3px){
  $scaleFactor: tan(30deg); /*this smushes a square into a 60deg/120deg rhombus*/
  $inverseScale: 1/$scaleFactor;
  $sideLength: $size/sqrt(3);
  $totalHeight: $sideLength + $size;
  $boxShadow: $shadow;
  $scaledBorderWidth: $borderWidth/$scaleFactor;
  $border: solid #{$borderWidth} #fff;
  $scaledBorder: solid #{$scaledBorderWidth} #fff;
  
  position: relative;
  width: $size;
  height: $sideLength;
  margin-top: $size/3;
  margin-bottom: $size/3;
  background: $background;
  background-size: $totalHeight auto;
  background-position: center center;
  box-shadow: $boxShadow; 
  border-left: $border;
  border-right: $border;
  
  .hex1,
  .hex2 {
    position: absolute;
    overflow: hidden;
    width: $size/sqrt(2);
    height: $size/sqrt(2);
    left: $sideLength/4 - $borderWidth + 1px; /*for some reason this 1px correction is needed */
    background: inherit;
    box-shadow: $boxShadow;
    @include transform(scaleY(#{$scaleFactor}) rotate(-45deg));
    
    &:after {
      /*counter rotate and un-scale the bg image*/
      content: "";
      position: absolute;
      left: -($sideLength/4 + 1px); /*same correction as up above */
      width: $size;
      height: $size/sqrt(2);
      top: 0;
      background: inherit;
      
      @include transform(rotate(45deg) scaleY(#{$inverseScale}));
    }
  }

  .hex1 {
    top: - $size/sqrt(2)/2;
    border-top: $scaledBorder;
    border-right: $scaledBorder;
    
    &:after {
      background-position: center 17%; 
      margin-top: -$scaledBorderWidth;
    }
  }
  
  .hex2 {
    bottom: -$size/sqrt(2)/2;
    border-left: $scaledBorder;
    border-bottom: $scaledBorder;
    
    &:after {
      background-position: center 83%;
      margin-left: - $scaledBorderWidth + 1px; /*that pesky single pixel correction again*/
    }
  }
  
  /*cover up the box shadows */
  &:after {
    content: "";
    position: absolute;
    top: $borderWidth/sqrt(2);
    bottom: 0;
    left: 0;
    right: 0;
    height: $sideLength - 2*$borderWidth/sqrt(2);
    background: inherit;
  }
}


// Image Inside Haxagon
// try passing different sizes and background images to the mixin
// @include image-hexa();
// @include image-hexa(135px, hidden, 0 auto);
@mixin image-hexa($width: 135px, $overflow: hidden, $margin: 0 auto){
	@include transform-origin(50%);
	width: $width;
	height: $width - 20px;
	overflow: $overflow;
	@include rotate(120deg);
	div{
		@include transform-origin(50%);
		overflow: $overflow;
		margin: $margin;
		height: 100%;
		width: 100%;
	}
	.hex1, 
	.hex2{
		@include rotate(-60deg);
	}
}
