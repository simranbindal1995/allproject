 
storingSkills: [function(cb) {

    Utils.universalFunctions.logger('Check the skill id , see if user has already added that skill , storing the skills in the DB')

    async.eachSeries(params.skillId, function(item, Incb) {

            Utils.async.auto({
                storingSkills: [function(cb) {

                }]
            }, function(err, result) {
                Incb(err ? err : null, true)
            })


        },
        function(err, result) {
            cb(err ? err : null, result)
        });

}]













 function(data, cb) {

  async.eachSeries(allProjects, function(item, Incb) {

          async.waterfall([
              function(c1) {

              }
          ], function(err, result) {
              if (err) Incb(err);
              Incb();
          })


      },
      function(err, result) {
          if (err) cb(err);
          cb(null, data);
      });
},


  var date = moment().tz("Asia/Kolkata").startOf('day').unix() 

create_project: function(params, callback) {
    Utils.async.waterfall([
    function(){
    
    }
    ], function(err, result) {
            if (err) callback(err);
            callback(null, result);
        })
        }

        
team_status_graph: function(params, callback) {
        
        async.waterfall([
                function(cb) {
                }
            ],
            function(err, result) {
                if (err)
                    callback(err);
                else
                    callback(null,result);
            })
    },



field: {$gte: value} }

$where: "this.phases.length ==0",type :1}



async.eachSeries(processArr, function(item, Incb) {
                        
},
function(err, result) {
if (err) cb(err);
cb(null, data);
});


 if (minutes >= 60) {

   hours += Math.floor(minutes / 60);
    minutes = minutes % 60;
}

if (hours < 10) { hours = "0" +hours }
if (minutes < 10) { minutes = "0" + minutes }

"invitee" : [ 
        {
            "is_mandatory" : 1,
            "user_id" : "599c2d00ad18fa2d55214d1e"
        }, 
        {
            "is_mandatory" : 1,
            "user_id" : "598181430e58a04c3c146c12",
            "time" : 1507636464,
            "is_confirmed" : 1
        }
    ],


///// CONVERT MINUTES TO HRS AND MINS
var hours1 = Math.trunc(user_story_effort / 60);
var minutes1 = user_story_effort % 60;

if (hours1 < 10) {
    hours1 = "0" + hours1
}
if (minutes1 < 10) {
    minutes1 = "0" + minutes1
}
var y = hours1 + ":" + minutes1


Project.find(query)
  .populate({ 
     path: 'pages',
     populate: {
       path: 'components',
       model: 'Component'
     } 
  }) 


  burned_hours = moment.duration(logged_time).asMinutes()

  
   var match = {
      $match: {
      "created_by": Mongoose.Types.ObjectId(item.user),
      "created_at": { $gte: params.start_date, $lte: params.end_date },
      "is_deleted": false,
      "type": 3
      }
      };
      var group = {
      $group: {
      "_id": { created_by: "$created_by" },
      "task_hours": {
          $sum: "$estimate_per_process.effort_estimate_hours",
      },
      "task_minutes": {
          $sum: "$estimate_per_process.effort_estimate_minutes",
      }
      }
      }


      Models.tasks.tasks.aggregate([match, group]).exec(function(err, resp) {

      if (err) cb(responses.systemError);
      else {
      }
      });










      var options = {
                        _id: "$_id",
                        "total_estimations_hours": {
                            $sum: "$estimations.effort_estimation_hours",
                        },
                        "total_estimations_minutes": {
                            $sum: "$estimations.effort_estimation_minutes",
                        },
                        total_userstories: {
                            $sum: 1
                        },
                        task_ids: {
                            $push: "$estimations.task_id"
                        }
                    }

                    var match = {};
                    if (params.project_id)
                        match.project_id = Mongoose.Types.ObjectId(params.project_id);
                    if (params.phase_id)
                        match.phase_id = Mongoose.Types.ObjectId(params.phase_id);

                    Models.estimations.aggregate()
                        .match(match)
                        .unwind("$estimations")
                        .group(options)
                        .exec(function(err, resp) {
                        }
                        })